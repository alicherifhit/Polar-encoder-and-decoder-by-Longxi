%
VHDL需要加一个type vector_of_signed8 is array (natural range <>) of signed(7 downto 0);
然后删除testbench里面的--  FOR ALL : HDL_DUT; --    USE ENTITY work.HDL_DUT(rtl);


N=8; K=8;
u=[0;0;0;1;0;1;1;1];
x=encodeLongxi(N,K,u,'AWGN',10);
y=afterTransmitInChannel(x);
%编码后应为01101001
uhat=decodeLongxi(y,'AWGN',10)



N=4; K=4;
u=[0;1;0;1];
x=encodeLongxi(N,K,u,'AWGN',100);
y=afterTransmitInChannel(x);
uhat=decodeLongxi(y,'AWGN',100)

N=16; K=16;
u=[0;1;0;1;0;1;0;1;0;1;0;1;0;1;0;1];
x=encodeLongxi(N,K,u,'AWGN',10)

尝试使用RMA：
persistent intArray;
if isempty(intArray)
    testArray =    [54    45    29    68    33    20    69    24    85    94
        33    53    68     1    79    74    55    12    84    65
        11    46    70    61    48    25    43    61    26    48
        62    88     7    39     4    92    65    46    62    64
        78    52    26    92    18    27    65    46    59    55
        43    95    23     1    73    77    68    67    55    65
        10    64    67    47    48    19    64    78    87    55
        27    96    85    43    16    29    95    36    27    73
        16    25    35    47    35    10    21    67    32    53
        29    68    79    78    61    58    71    42    12   100];
    intArray = int8(testArray);
end
u4 = intArray(5,7);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NOTE: Except for plotPC(), it is a must to have
%       initPC() run before using any other routine.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

>> N=128; K=64;

>> %%%%%%%%%%%% 1.  BSC Channel  %%%%%%%%%%%%%
>> initPC(N,K,'BSC',0.1); % Transition prob 'p' of BSC assumed during code-design = 0.1

 All polar coding parameters & resources initialized. (in a structure - "PCparams") 
                           N: 128
                           K: 64
                           n: 7
                    FZlookup: [128x1 double]
        design_channelstring: 'BSC'
         design_channelstate: 0.1000
                         LLR: [1x255 double]
                        BITS: [2x127 double]
          bitreversedindices: [128x1 double]
    index_of_first0_from_MSB: [128x1 double]
    index_of_first1_from_MSB: [128x1 double]

>> u=(rand(K,1)>0.5); 			%random message
>> x=pencode(u); 			%polar encoding
>> y=OutputOfChannel(x,'BSC',0.15); 	%simulate BSC channel with p=0.1
>> uhat=pdecode(y,'BSC',0.15); 		%decode under the same BSC channel setting

>> logical( sum( uhat == u ) == K )	%check for Decoding success!

ans =

     1               

%%%%%%%%%%%%%%% PLOTTING PERFORMANCE CURVES %%%%%%%%%%%%%%%%%%
>> plotPC(256,128,'BSC', 0.1, 0.01:0.02:0.16,10000) % Last is #Monte-Carlo-samples. This module runs everything necessary. Doesn't require anything to have initialized before.

 * Max. Monte-Carlo Iterations = 10000, ensuring 100 frame errors, and a minimum of 1000 iterations

 * Polar Code designed for BSC channel at p=0.100000

 * Channel-states (BSC-p) to be run: 
	     0.0100    0.0300    0.0500    0.0700    0.0900    0.1100    0.1300    0.1500


........(lots of text)


     BSC-p           :    0.0100    0.0300    0.0500    0.0700    0.0900    0.1100    0.1300    0.1500

 Frame Error Rates   :         0    0.0081    0.0929    0.2880    0.6110    0.8580    0.9680    0.9980

 Bit Error Rates     :         0    0.0007    0.0125    0.0494    0.1564    0.2624    0.3650    0.4218

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



>> %%%%%%%%%%%%%%%%%%% 2.  BEC Channel  %%%%%%%%%%%%%%%%%%%%%
>> initPC(N,K,'BEC',0.1); % Erasure prob 'epsilon' of BEC assumed during code-design = 0.1

 All polar coding parameters & resources initialized. (in a structure - "PCparams") 
                           N: 128
                           K: 64
                           n: 7
                    FZlookup: [128x1 double]
        design_channelstring: 'BEC'
         design_channelstate: 0.1000
                         LLR: [1x255 double]
                        BITS: [2x127 double]
          bitreversedindices: [128x1 double]
    index_of_first0_from_MSB: [128x1 double]
    index_of_first1_from_MSB: [128x1 double]

>> u=(rand(K,1)>0.5); 			%random message
>> x=pencode(u); 			%polar encoding
>> y=OutputOfChannel(x,'BEC',0.15); 	%simulate BEC channel with erasure prob=0.1
>> uhat=pdecode(y,'BEC',0.15); 		%decode under the same BEC channel setting

>> logical( sum( uhat == u ) == K )	%check for Decoding success!

ans =

     1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

>> %%%%%%%%%%%% 3.  AWGN Channel  %%%%%%%%%%%%%
>> initPC(N,K,'AWGN',0); %designSNR=0dB

 All polar coding parameters & resources initialized. (in a structure - "PCparams") 
                           N: 128
                           K: 64
                           n: 7
                    FZlookup: [128x1 double]
        design_channelstring: 'AWGN'
         design_channelstate: 0
                         LLR: [1x255 double]
                        BITS: [2x127 double]
          bitreversedindices: [128x1 double]
    index_of_first0_from_MSB: [128x1 double]
    index_of_first1_from_MSB: [128x1 double]

>> u=(rand(K,1)>0.5);             %random message
>> x=pencode(u);      		  %polar encoding
>> y=OutputOfChannel(x,'AWGN',1); %simulate AWGN channel at Eb/N0=1dB
>> uhat=pdecode(y,'AWGN',1); 	  %decode under the same AWGN channel setting.

>> logical( sum( uhat == u ) == K )	%check for Decoding success!

ans =

     1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
