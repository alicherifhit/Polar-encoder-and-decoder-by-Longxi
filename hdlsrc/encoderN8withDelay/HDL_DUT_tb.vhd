-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\encoderN8withDelay\HDL_DUT_tb.vhd
-- Created: 2017-04-25 14:30:35
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- out1                          ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_DUT_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work;
USE work.HDL_DUT_pkg.ALL;
USE work.HDL_DUT_tb_pkg.ALL;

ENTITY HDL_DUT_tb IS
END HDL_DUT_tb;


ARCHITECTURE rtl OF HDL_DUT_tb IS

  -- Component Declarations
  COMPONENT HDL_DUT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          ce_out                          :   OUT   std_logic;
          out1                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_DUT
    USE ENTITY work.HDL_DUT(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL clk_enable                       : std_logic;
  SIGNAL out1_done                        : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL out1_done_enb                    : std_logic;  -- ufix1
  SIGNAL out1_addr                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL out1_active                      : std_logic;  -- ufix1
  SIGNAL rawData_in1                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL holdData_in1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL in1_offset                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL in1                              : signed(7 DOWNTO 0);  -- int8
  SIGNAL in1_1                            : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL out1                             : std_logic;
  SIGNAL out1_enb                         : std_logic;  -- ufix1
  SIGNAL out1_lastAddr                    : std_logic;  -- ufix1
  SIGNAL out1_expected_1                  : std_logic;
  SIGNAL out1_ref                         : std_logic;
  SIGNAL out1_testFailure                 : std_logic;  -- ufix1

BEGIN
  u_HDL_DUT : HDL_DUT
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              in1 => in1_1,  -- int8
              ce_out => ce_out,
              out1 => out1
              );

  out1_done_enb <= out1_done AND rdEnb;

  
  out1_active <= '1' WHEN out1_addr /= to_unsigned(16#32#, 6) ELSE
      '0';

  
  rawData_in1 <= to_signed(16#00#, 8) WHEN rdEnb = '0' ELSE
      to_signed(16#01#, 8);

  -- holdData reg for Constant_out1
  stimuli_Constant_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_in1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      holdData_in1 <= rawData_in1;
    END IF;
  END PROCESS stimuli_Constant_out1_process;

  stimuli_Constant_out1_1: PROCESS (rawData_in1, rdEnb, tb_enb_delay)
  BEGIN
    IF tb_enb_delay = '0' THEN
      in1_offset <= (OTHERS => '0');
    ELSIF rdEnb = '0' THEN
      in1_offset <= holdData_in1;
    ELSE
      in1_offset <= rawData_in1;
    END IF;
  END PROCESS stimuli_Constant_out1_1;

  in1 <= in1_offset AFTER 2 ns;

  in1_1 <= std_logic_vector(in1);

  snkDonen <=  NOT check1_done;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  clk_enable <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  out1_enb <= ce_out AND out1_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out1_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF out1_enb = '1' THEN
        IF out1_addr = to_unsigned(16#32#, 6) THEN 
          out1_addr <= to_unsigned(16#00#, 6);
        ELSE 
          out1_addr <= out1_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  out1_lastAddr <= '1' WHEN out1_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  out1_done <= out1_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF out1_done_enb = '1' THEN
        check1_done <= out1_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  -- Data source for out1_expected
  out1_expected_1 <= '1';

  out1_ref <= out1_expected_1;

  out1_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out1_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND out1 /= out1_ref THEN
        out1_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in out1: Expected " & to_hex(out1_ref) & (" Actual " & to_hex(out1))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS out1_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF out1_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

