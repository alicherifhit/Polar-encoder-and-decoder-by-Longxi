-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\N4\HDL_DUT.vhd
-- Created: 2017-04-20 17:00:51
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_DUT
-- Source Path: N4/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_DUT IS
  PORT( in1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in2                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in3                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in4                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        out_rsvd                          :   OUT   std_logic;
        out1                              :   OUT   std_logic;
        out2                              :   OUT   std_logic;
        out3                              :   OUT   std_logic
        );
END HDL_DUT;


ARCHITECTURE rtl OF HDL_DUT IS

  -- Component Declarations
  COMPONENT f
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT f1
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT f2
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT g2
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in3                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT g
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in3                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT g1
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in3                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT f3
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT g3
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in3                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : f
    USE ENTITY work.f(rtl);

  FOR ALL : f1
    USE ENTITY work.f1(rtl);

  FOR ALL : f2
    USE ENTITY work.f2(rtl);

  FOR ALL : g2
    USE ENTITY work.g2(rtl);

  FOR ALL : g
    USE ENTITY work.g(rtl);

  FOR ALL : g1
    USE ENTITY work.g1(rtl);

  FOR ALL : f3
    USE ENTITY work.f3(rtl);

  FOR ALL : g3
    USE ENTITY work.g3(rtl);

  -- Signals
  SIGNAL y                                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_1                              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_2                              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_signed                         : signed(7 DOWNTO 0);  -- int8
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL g2_out1                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL g2_out1_signed                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL g_out1                           : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL g1_out1                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_3                              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_signed_1                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL g3_out1                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL g3_out1_signed                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL Compare_To_Zero3_out1            : std_logic;

BEGIN
  u_f : f
    PORT MAP( in1 => in1,  -- int8
              in2 => in2,  -- int8
              out1 => y  -- int8
              );

  u_f1 : f1
    PORT MAP( in1 => in1,  -- int8
              in2 => in2,  -- int8
              out1 => y_1  -- int8
              );

  u_f2 : f2
    PORT MAP( in1 => y,  -- int8
              in2 => y_1,  -- int8
              out1 => y_2  -- int8
              );

  u_g2 : g2
    PORT MAP( in1 => y,  -- int8
              in2 => y_1,  -- int8
              in3 => Compare_To_Zero_out1,
              out_rsvd => g2_out1  -- int8
              );

  u_g : g
    PORT MAP( in1 => in1,  -- int8
              in2 => in2,  -- int8
              in3 => Logical_Operator_out1,
              out_rsvd => g_out1  -- int8
              );

  u_g1 : g1
    PORT MAP( in1 => in3,  -- int8
              in2 => in4,  -- int8
              in3 => Compare_To_Zero1_out1,
              out_rsvd => g1_out1  -- int8
              );

  u_f3 : f3
    PORT MAP( in1 => g_out1,  -- int8
              in2 => g1_out1,  -- int8
              out1 => y_3  -- int8
              );

  u_g3 : g3
    PORT MAP( in1 => g_out1,  -- int8
              in2 => g1_out1,  -- int8
              in3 => Compare_To_Zero2_out1,
              out_rsvd => g3_out1  -- int8
              );

  y_signed <= signed(y_2);

  
  Compare_To_Zero_out1 <= '1' WHEN y_signed >= to_signed(16#00#, 8) ELSE
      '0';

  g2_out1_signed <= signed(g2_out1);

  
  Compare_To_Zero1_out1 <= '1' WHEN g2_out1_signed >= to_signed(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1 <= Compare_To_Zero1_out1 XOR Compare_To_Zero_out1;

  y_signed_1 <= signed(y_3);

  
  Compare_To_Zero2_out1 <= '1' WHEN y_signed_1 >= to_signed(16#00#, 8) ELSE
      '0';

  g3_out1_signed <= signed(g3_out1);

  
  Compare_To_Zero3_out1 <= '1' WHEN g3_out1_signed >= to_signed(16#00#, 8) ELSE
      '0';

  out_rsvd <= Compare_To_Zero_out1;

  out1 <= Compare_To_Zero1_out1;

  out2 <= Compare_To_Zero2_out1;

  out3 <= Compare_To_Zero3_out1;

END rtl;

