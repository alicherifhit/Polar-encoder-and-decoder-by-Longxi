-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\successfulStateMachine_decoderN4ByFullMatlab\HDL_DUT.vhd
-- Created: 2017-05-03 21:45:09
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- out1                          ce_out        0.2
-- out2                          ce_out        0.2
-- out3                          ce_out        0.2
-- out4                          ce_out        0.2
-- out5                          ce_out        0.2
-- out6                          ce_out        0.2
-- out7                          ce_out        0.2
-- out8                          ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_DUT
-- Source Path: successfulStateMachine_decoderN4ByFullMatlab/HDL_DUT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HDL_DUT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in2                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in3                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        in4                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        ce_out                            :   OUT   std_logic;
        out1                              :   OUT   std_logic;
        out2                              :   OUT   std_logic;
        out3                              :   OUT   std_logic;
        out4                              :   OUT   std_logic;
        out5                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        out6                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        out7                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
        out8                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
        );
END HDL_DUT;


ARCHITECTURE rtl OF HDL_DUT IS

  -- Component Declarations
  COMPONENT N2decoder
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          LLR1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          LLR2                            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          LLR3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          LLR4                            :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          u1                              :   OUT   std_logic;
          u2                              :   OUT   std_logic;
          u3                              :   OUT   std_logic;
          u4                              :   OUT   std_logic;
          soft1                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          soft2                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          soft3                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- int32
          soft4                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- int32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : N2decoder
    USE ENTITY work.N2decoder(rtl);

  -- Signals
  SIGNAL in1_signed                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion_out1        : signed(31 DOWNTO 0);  -- int32
  SIGNAL in2_signed                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion1_out1       : signed(31 DOWNTO 0);  -- int32
  SIGNAL in3_signed                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion2_out1       : signed(31 DOWNTO 0);  -- int32
  SIGNAL in4_signed                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL Data_Type_Conversion3_out1       : signed(31 DOWNTO 0);  -- int32
  SIGNAL u1                               : std_logic;
  SIGNAL u2                               : std_logic;
  SIGNAL u3                               : std_logic;
  SIGNAL u4                               : std_logic;
  SIGNAL soft1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL soft2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL soft3                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL soft4                            : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_N2decoder : N2decoder
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              LLR1 => std_logic_vector(Data_Type_Conversion_out1),  -- int32
              LLR2 => std_logic_vector(Data_Type_Conversion1_out1),  -- int32
              LLR3 => std_logic_vector(Data_Type_Conversion2_out1),  -- int32
              LLR4 => std_logic_vector(Data_Type_Conversion3_out1),  -- int32
              u1 => u1,
              u2 => u2,
              u3 => u3,
              u4 => u4,
              soft1 => soft1,  -- int32
              soft2 => soft2,  -- int32
              soft3 => soft3,  -- int32
              soft4 => soft4  -- int32
              );

  in1_signed <= signed(in1);

  Data_Type_Conversion_out1 <= resize(in1_signed, 32);

  in2_signed <= signed(in2);

  Data_Type_Conversion1_out1 <= resize(in2_signed, 32);

  in3_signed <= signed(in3);

  Data_Type_Conversion2_out1 <= resize(in3_signed, 32);

  in4_signed <= signed(in4);

  Data_Type_Conversion3_out1 <= resize(in4_signed, 32);

  ce_out <= clk_enable;

  out1 <= u1;

  out2 <= u2;

  out3 <= u3;

  out4 <= u4;

  out5 <= soft1;

  out6 <= soft2;

  out7 <= soft3;

  out8 <= soft4;

END rtl;

