-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\g\HDL_DUT_tb.vhd
-- Created: 2017-04-20 10:27:08
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_DUT_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
USE work.HDL_DUT_tb_pkg.ALL;

ENTITY HDL_DUT_tb IS
END HDL_DUT_tb;


ARCHITECTURE rtl OF HDL_DUT_tb IS

  -- Component Declarations
  COMPONENT HDL_DUT
    PORT( in1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in2                             :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          in3                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : HDL_DUT
    USE ENTITY work.HDL_DUT(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL out_rsvd_done                    : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL out_rsvd_done_enb                : std_logic;  -- ufix1
  SIGNAL out_rsvd_addr                    : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL out_rsvd_active                  : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL tb_enb_delay                     : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL out_rsvd_enb                     : std_logic;  -- ufix1
  SIGNAL out_rsvd_lastAddr                : std_logic;  -- ufix1
  SIGNAL rawData_in1                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL holdData_in1                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL Constant_out1_addr               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant_out1_active             : std_logic;  -- ufix1
  SIGNAL Constant_out1_enb                : std_logic;  -- ufix1
  SIGNAL Counter_Free_Running_out1_addr_delay_1 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL rawData_in2                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL holdData_in2                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rawData_in3                      : std_logic;
  SIGNAL holdData_in3                     : std_logic;
  SIGNAL in1_offset                       : signed(7 DOWNTO 0);  -- int8
  SIGNAL in1_1                            : signed(7 DOWNTO 0);  -- int8
  SIGNAL in1_2                            : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL in2_offset                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in2                              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL in2_1                            : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL in3_offset                       : std_logic;
  SIGNAL in3_1                            : std_logic;
  SIGNAL out_rsvd                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL out_rsvd_signed                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL out_rsvd_addr_delay_1            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL out_rsvd_expected                : signed(7 DOWNTO 0);  -- int8
  SIGNAL out_rsvd_ref                     : signed(7 DOWNTO 0);  -- int8
  SIGNAL out_rsvd_testFailure             : std_logic;  -- ufix1

BEGIN
  u_HDL_DUT : HDL_DUT
    PORT MAP( in1 => in1_2,  -- int8
              in2 => in2_1,  -- ufix2
              in3 => in3_1,
              out_rsvd => out_rsvd  -- int8
              );

  out_rsvd_done_enb <= out_rsvd_done AND rdEnb;

  
  out_rsvd_active <= '1' WHEN out_rsvd_addr /= to_unsigned(16#32#, 6) ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  snkDonen <=  NOT check1_done;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  -- Delay inside enable generation: register depth 1
  u_enable_delay_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tb_enb_delay <= '0';
    ELSIF clk'event AND clk = '1' THEN
      tb_enb_delay <= tb_enb;
    END IF;
  END PROCESS u_enable_delay_process;

  
  rdEnb <= tb_enb_delay WHEN check1_done = '0' ELSE
      '0';

  ce_out <= enb AND (rdEnb AND tb_enb_delay);

  out_rsvd_enb <= ce_out AND out_rsvd_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_rsvd_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF out_rsvd_enb = '1' THEN
        IF out_rsvd_addr = to_unsigned(16#32#, 6) THEN 
          out_rsvd_addr <= to_unsigned(16#00#, 6);
        ELSE 
          out_rsvd_addr <= out_rsvd_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  out_rsvd_lastAddr <= '1' WHEN out_rsvd_addr >= to_unsigned(16#32#, 6) ELSE
      '0';

  out_rsvd_done <= out_rsvd_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF out_rsvd_done_enb = '1' THEN
        check1_done <= out_rsvd_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  -- Data source for in1
  rawData_in1 <= to_signed(16#03#, 8);

  -- holdData reg for Constant_out1
  stimuli_Constant_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_in1 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_in1 <= rawData_in1;
    END IF;
  END PROCESS stimuli_Constant_out1_process;

  
  Constant_out1_active <= '1' WHEN Constant_out1_addr /= to_unsigned(16#32#, 6) ELSE
      '0';

  Constant_out1_enb <= Constant_out1_active AND (rdEnb AND tb_enb_delay);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 50
  Constant_rsvd_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_addr <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF Constant_out1_enb = '1' THEN
        IF Constant_out1_addr = to_unsigned(16#32#, 6) THEN 
          Constant_out1_addr <= to_unsigned(16#00#, 6);
        ELSE 
          Constant_out1_addr <= Constant_out1_addr + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS Constant_rsvd_process;


  Counter_Free_Running_out1_addr_delay_1 <= Constant_out1_addr AFTER 1 ns;

  -- Data source for in2
  in2_fileread: PROCESS (Counter_Free_Running_out1_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "in2.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(3 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    rawData_in2 <= unsigned(read_data(1 DOWNTO 0));
  END PROCESS in2_fileread;

  -- holdData reg for Counter_Free_Running_out1
  stimuli_Counter_Free_Running_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_in2 <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_in2 <= rawData_in2;
    END IF;
  END PROCESS stimuli_Counter_Free_Running_out1_process;

  -- Data source for in3
  rawData_in3 <= '1';

  -- holdData reg for Constant2_out1
  stimuli_Constant2_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_in3 <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_in3 <= rawData_in3;
    END IF;
  END PROCESS stimuli_Constant2_out1_process;

  stimuli_Constant_out1_1: PROCESS (rawData_in1, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      in1_offset <= holdData_in1;
    ELSE
      in1_offset <= rawData_in1;
    END IF;
  END PROCESS stimuli_Constant_out1_1;

  in1_1 <= in1_offset AFTER 2 ns;

  in1_2 <= std_logic_vector(in1_1);

  stimuli_Counter_Free_Running_out1_1: PROCESS (rawData_in2, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      in2_offset <= holdData_in2;
    ELSE
      in2_offset <= rawData_in2;
    END IF;
  END PROCESS stimuli_Counter_Free_Running_out1_1;

  in2 <= in2_offset AFTER 2 ns;

  in2_1 <= std_logic_vector(in2);

  stimuli_Constant2_out1_1: PROCESS (rawData_in3, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      in3_offset <= holdData_in3;
    ELSE
      in3_offset <= rawData_in3;
    END IF;
  END PROCESS stimuli_Constant2_out1_1;

  in3_1 <= in3_offset AFTER 2 ns;

  out_rsvd_signed <= signed(out_rsvd);

  out_rsvd_addr_delay_1 <= out_rsvd_addr AFTER 1 ns;

  -- Data source for out_rsvd_expected
  out_rsvd_expected_fileread: PROCESS (out_rsvd_addr_delay_1, tb_enb_delay, rdEnb)
    FILE fp: TEXT open READ_MODE is "out_rsvd_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic_vector(7 DOWNTO 0);

  BEGIN
    IF tb_enb_delay /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      HREAD(l, read_data);
    END IF;
    out_rsvd_expected <= signed(read_data(7 DOWNTO 0));
  END PROCESS out_rsvd_expected_fileread;

  out_rsvd_ref <= out_rsvd_expected;

  out_rsvd_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_rsvd_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND out_rsvd_signed /= out_rsvd_ref THEN
        out_rsvd_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in out_rsvd_signed: Expected " & to_hex(out_rsvd_ref) & (" Actual " & to_hex(out_rsvd_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS out_rsvd_signed_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF out_rsvd_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

