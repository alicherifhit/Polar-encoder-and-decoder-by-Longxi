-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\defaultStateflow\moore_sf_tb.vhd
-- Created: 2017-04-25 14:38:16
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: moore_sf_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.moore_sf_pkg.ALL;
USE work.moore_sf_tb_pkg.ALL;

ENTITY moore_sf_tb IS
END moore_sf_tb;


ARCHITECTURE rtl OF moore_sf_tb IS

  -- Component Declarations
  COMPONENT moore_sf
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          get_going                       :   IN    std_logic;
          ready                           :   OUT   std_logic;
          enable                          :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : moore_sf
    USE ENTITY work.moore_sf(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enable_done                      : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL enable_done_enb                  : std_logic;  -- ufix1
  SIGNAL ready_addr                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL enable_lastAddr                  : std_logic;  -- ufix1
  SIGNAL resetn                           : std_logic;
  SIGNAL check2_done                      : std_logic;  -- ufix1
  SIGNAL ready_done                       : std_logic;  -- ufix1
  SIGNAL ready_done_enb                   : std_logic;  -- ufix1
  SIGNAL ready_active                     : std_logic;  -- ufix1
  SIGNAL snkDone                          : std_logic;
  SIGNAL snkDonen                         : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL ce_out                           : std_logic;
  SIGNAL ready_enb                        : std_logic;  -- ufix1
  SIGNAL ready_lastAddr                   : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL rawData_get_going                : std_logic;
  SIGNAL holdData_get_going               : std_logic;
  SIGNAL get_going_offset                 : std_logic;
  SIGNAL get_going_1                      : std_logic;
  SIGNAL ready                            : std_logic;
  SIGNAL enable                           : std_logic;
  SIGNAL ready_addr_delay_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL ready_expected                   : std_logic;
  SIGNAL ready_ref                        : std_logic;
  SIGNAL ready_testFailure                : std_logic;  -- ufix1
  SIGNAL enable_addr_delay_1              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL enable_expected                  : std_logic;
  SIGNAL enable_ref                       : std_logic;
  SIGNAL enable_testFailure               : std_logic;  -- ufix1
  SIGNAL testFailure                      : std_logic;  -- ufix1

BEGIN
  u_moore_sf : moore_sf
    PORT MAP( clk => clk,
              reset => reset,
              get_going => get_going_1,
              ready => ready,
              enable => enable
              );

  enable_done_enb <= enable_done AND rdEnb;

  
  enable_lastAddr <= '1' WHEN ready_addr >= to_unsigned(16#9B#, 8) ELSE
      '0';

  enable_done <= enable_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check2_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF enable_done_enb = '1' THEN
        check2_done <= enable_done;
      END IF;
    END IF;
  END PROCESS checkDone_2_process;

  ready_done_enb <= ready_done AND rdEnb;

  
  ready_active <= '1' WHEN ready_addr /= to_unsigned(16#9B#, 8) ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  snkDonen <=  NOT snkDone;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 155
  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF snkDone = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN snkDone = '0' ELSE
      '0';

  ce_out <= enb AND (rdEnb AND tb_enb);

  ready_enb <= ce_out AND ready_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 155
  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ready_addr <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF ready_enb = '1' THEN
        IF ready_addr = to_unsigned(16#9B#, 8) THEN 
          ready_addr <= to_unsigned(16#00#, 8);
        ELSE 
          ready_addr <= ready_addr + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  ready_lastAddr <= '1' WHEN ready_addr >= to_unsigned(16#9B#, 8) ELSE
      '0';

  ready_done <= ready_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ready_done_enb = '1' THEN
        check1_done <= ready_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  snkDone <= check1_done AND check2_done;

  -- Data source for get_going
  rawData_get_going <= '1';

  -- holdData reg for Constant_out1
  stimuli_Constant_out1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_get_going <= 'X';
    ELSIF clk'event AND clk = '1' THEN
      holdData_get_going <= rawData_get_going;
    END IF;
  END PROCESS stimuli_Constant_out1_process;

  stimuli_Constant_out1_1: PROCESS (rawData_get_going, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      get_going_offset <= holdData_get_going;
    ELSE
      get_going_offset <= rawData_get_going;
    END IF;
  END PROCESS stimuli_Constant_out1_1;

  get_going_1 <= get_going_offset AFTER 2 ns;

  ready_addr_delay_1 <= ready_addr AFTER 1 ns;

  -- Data source for ready_expected
  ready_expected_fileread: PROCESS (ready_addr_delay_1, tb_enb, rdEnb)
    FILE fp: TEXT open READ_MODE is "ready_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF rdEnb = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    ready_expected <= read_data;
  END PROCESS ready_expected_fileread;

  ready_ref <= ready_expected;

  ready_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ready_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND ready /= ready_ref THEN
        ready_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in ready: Expected " & to_hex(ready_ref) & (" Actual " & to_hex(ready))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS ready_checker;

  enable_addr_delay_1 <= ready_addr AFTER 1 ns;

  -- Data source for enable_expected
  enable_expected_fileread: PROCESS (enable_addr_delay_1, tb_enb, ce_out)
    FILE fp: TEXT open READ_MODE is "enable_expected.dat";
    VARIABLE l: LINE;
    VARIABLE read_data: std_logic;

  BEGIN
    IF tb_enb /= '1' THEN
    ELSIF ce_out = '1' AND NOT ENDFILE(fp) THEN
      READLINE(fp, l);
      READ(l, read_data);
    END IF;
    enable_expected <= read_data;
  END PROCESS enable_expected_fileread;

  enable_ref <= enable_expected;

  enable_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      enable_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND enable /= enable_ref THEN
        enable_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in enable: Expected " & to_hex(enable_ref) & (" Actual " & to_hex(enable))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS enable_checker;

  testFailure <= ready_testFailure OR enable_testFailure;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF snkDone = '1' THEN
        IF testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

